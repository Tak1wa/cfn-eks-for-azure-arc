AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation EKS Template
Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: ""
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: ""
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: ""
  ClusterName:
    Type: String
    Default: iwasa-eks
    Description: ""
  NodeGroupName:
    Type: String
    Default: iwasa-node-group
    Description: ""
  KeyPair:
    Description: ""
    Type: AWS::EC2::KeyPair::KeyName
  NodeInstanceType:
    Description: ""
    Type: String
    Default: m5.xlarge
  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: ""
    Default: 2
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: ""
    Default: 2
  NodeAutoScalingGroupDesiredSize:
    Type: Number
    Description: ""
    Default: 2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: for Networks.
        Parameters:
          - VpcCidr
          - PublicSubnet1Cidr
          - PublicSubnet2Cidr
      - Label:
          default: for Kubenetes.
        Parameters:
          - ClusterName
          - KeyPair

Resources:
  ###########################
  # Networks
  ###########################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: azurearc-vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: azurearc-subnet-public-a
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: azurearc-subnet-public-c
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: azurearc-igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: azurearc-public-rt
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ###########################
  # EKS
  ###########################
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${ClusterName}
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !GetAtt ControlPlaneSecurityGroup.GroupId
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ControlPlaneSecurityGroup"
      VpcId: !Ref VPC
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      RoleName: eks-cluster-role

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      ClusterName: !Ref EKSCluster
      DiskSize: 20
      InstanceTypes: 
        - !Ref NodeInstanceType
      NodegroupName: !Sub ${NodeGroupName}
      NodeRole: !GetAtt NodeInstanceRole.Arn
      RemoteAccess:
        Ec2SshKey: !Ref KeyPair
      ScalingConfig:
        DesiredSize: !Ref NodeAutoScalingGroupDesiredSize
        MaxSize: !Ref NodeAutoScalingGroupMinSize
        MinSize: !Ref NodeAutoScalingGroupMaxSize
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

Outputs:
  CliStep1:
    Value: !Sub "aws eks --region ap-northeast-1 update-kubeconfig --name ${ClusterName}"
  CliStep2:
    Value: "kubectl config get-contexts"
